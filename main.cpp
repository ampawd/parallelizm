#include <iostream>
#include <thread>
#include <vector>
#include <fstream>

#include "suite/simple.h"
#include "suite/matrices.h"
#include "profiler/profiler.h"


using parallelizm::profile;
using parallelizm::Matrix;
using parallelizm::BlockedMatrix;


int main()
{

	Matrix<int> m1({
			{1, 2, 0, 1,  0, 2, 3, 4,  2, 9, 5, 4,  1, 1, 2, 2},
			{0, 1, 2, 3,  1, 2, 3, 4,  2, 1, 1, 3,  2, 2, 4, 5},
			{2, 1, 2, 3,  1, 2, 1, 1,  0, 9, 0, 2,  1, 1, 2, 3},
			{2, 1, 2, 1,  1, 2, 3, 4,  2, 1, 1, 3,  2, 2, 4, 5},

			{9, 1, 2, 2,  1, 2, 1, 1,  0, 9, 0, 2,  1, 1, 2, 3},
			{0, 1, 2, 1,  1, 2, 3, 4,  2, 1, 1, 3,  2, 2, 4, 5},
			{0, 1, 2, 1,  1, 6, 3, 4,  2, 1, 1, 3,  2, 2, 4, 5},
			{9, 1, 2, 4,  1, 3, 1, 1,  0, 9, 0, 2,  1, 1, 2, 3},

			{9, 1, 2, 3,  1, 2, 1, 1,  0, 9, 0, 2,  1, 1, 2, 3},
			{0, 1, 2, 3,  1, 1, 3, 4,  2, 1, 1, 3,  2, 2, 4, 5},
			{4, 1, 2, 3,  1, 0, 2, 4,  1, 1, 3, 3,  2, 8, 4, 5},
			{2, 1, 2, 3,  1, 2, 3, 4,  5, 1, 1, 3,  2, 2, 4, 5},

			{9, 1, 3, 3,  3, 0, 1, 1,  8, 9, 0, 2,  1, 1, 2, 3},
			{8, 1, 1, 3,  5, 0, 2, 1,  6, 9, 0, 2,  1, 5, 2, 3},
			{1, 1, 5, 3,  7, 2, 3, 1,  0, 9, 0, 2,  1, 1, 2, 3},
			{2, 1, 9, 3,  2, 3, 4, 1,  0, 9, 0, 2,  1, 1, 2, 3}
			});


	Matrix<int> m2({
			{2, 2, 0, 1,  0, 2, 3, 4,  2, 9, 5, 4,  1, 1, 2, 2},
			{3, 1, 2, 4,  2, 2, 3, 4,  2, 1, 1, 3,  2, 2, 4, 5},
			{1, 1, 5, 2,  6, 2, 1, 1,  0, 9, 0, 2,  1, 1, 2, 3},
			{4, 1, 2, 1,  7, 2, 3, 4,  2, 1, 1, 3,  2, 2, 4, 5},

			{9, 1, 2, 2,  6, 2, 1, 1,  0, 9, 0, 2,  1, 1, 2, 3},
			{0, 1, 2, 1,  3, 2, 3, 4,  2, 1, 1, 3,  6, 2, 4, 8},
			{0, 1, 2, 1,  1, 2, 7, 8,  4, 8, 9, 4,  5, 2, 1, 4},
			{9, 1, 2, 4,  4, 3, 1, 1,  0, 9, 0, 2,  1, 1, 2, 2},

			{9, 1, 2, 3,  6, 2, 1, 2,  0, 9, 0, 2,  1, 1, 2, 3},
			{0, 1, 2, 3,  1, 3, 3, 6,  2, 1, 1, 1,  2, 2, 4, 5},
			{4, 1, 2, 9,  1, 8, 2, 4,  1, 1, 3, 7,  2, 8, 4, 5},
			{2, 1, 2, 0,  3, 5, 3, 4,  5, 1, 1, 9,  9, 2, 4, 5},

			{1, 1, 3, 1,  3, 5, 4, 2,  8, 9, 0, 2,  0, 1, 2, 3},
			{2, 6, 7, 2,  5, 0, 1, 3,  6, 9, 0, 2,  5, 5, 2, 3},
			{5, 2, 5, 3,  7, 2, 3, 5,  0, 9, 0, 2,  3, 1, 2, 2},
			{2, 3, 9, 3,  2, 3, 4, 3,  0, 9, 0, 2,  1, 8, 4, 1}
			});

	size_t blockSize = 4;
	Matrix<int> res(m1.rows(), m2.cols());	
	naiveMult(m1, m2, res);
	std::cout << res;

	BlockedMatrix<int> m1b(m1, blockSize);
	BlockedMatrix<int> m2b(m2, blockSize);			
	BlockedMatrix<int> resb(m1b.rows(), m2b.cols(), blockSize);

	simpleConcurrentMult(m1b, m2b, resb);	
	std::cout << resb;

	//  Matrix<int> m1({
	//      {1, 2, 0, 1,  0, 2, 3, 4,  2, 9, 5, 4},
	//      {0, 1, 2, 3,  1, 2, 3, 4,  2, 1, 1, 3},
	//      {2, 1, 2, 3,  1, 2, 1, 1,  0, 9, 0, 2},
	//      {2, 1, 2, 1,  1, 2, 3, 4,  2, 1, 1, 3},
	//
	//      {9, 1, 2, 2,  1, 2, 1, 1,  0, 9, 0, 2},
	//      {0, 1, 2, 1,  1, 2, 3, 4,  2, 1, 1, 3},
	//      {0, 1, 2, 1,  1, 6, 3, 4,  2, 1, 1, 3},
	//      {9, 1, 2, 4,  1, 3, 1, 1,  0, 9, 0, 2},
	//
	//      {9, 1, 2, 3,  1, 2, 1, 1,  0, 9, 0, 2},
	//      {0, 1, 2, 3,  1, 1, 3, 4,  2, 1, 1, 3},
	//      {4, 1, 2, 3,  1, 0, 2, 4,  1, 1, 3, 3},
	//      {2, 1, 2, 3,  1, 2, 3, 4,  5, 1, 1, 3},
	//
	//      {1, 1, 3, 1,  3, 5, 4, 2,  8, 9, 0, 2},
	//      {2, 6, 7, 2,  5, 0, 1, 3,  6, 9, 0, 2},
	//      {5, 2, 5, 3,  7, 2, 3, 5,  0, 9, 0, 2},
	//      {2, 3, 9, 3,  2, 3, 4, 3,  0, 9, 0, 2}
	//      });
	//
	//
	//  Matrix<int> m2({
	//      {2, 2, 0, 1,  0, 2, 3, 4,  2, 9, 5, 4},
	//      {3, 1, 2, 4,  2, 2, 3, 4,  2, 1, 1, 3},
	//      {1, 1, 5, 2,  6, 2, 1, 1,  0, 9, 0, 2},
	//      {4, 1, 2, 1,  7, 2, 3, 4,  2, 1, 1, 3},
	//
	//      {9, 1, 2, 2,  6, 2, 1, 1,  0, 9, 0, 2},
	//      {0, 1, 2, 1,  3, 2, 3, 4,  2, 1, 1, 3},
	//      {0, 1, 2, 1,  1, 2, 7, 8,  4, 8, 9, 4},
	//      {9, 1, 2, 4,  4, 3, 1, 1,  0, 9, 0, 2},
	//
	//      {9, 1, 2, 3,  6, 2, 1, 2,  0, 9, 0, 2},
	//      {0, 1, 2, 3,  1, 3, 3, 6,  2, 1, 1, 1},
	//      {4, 1, 2, 9,  1, 8, 2, 4,  1, 1, 3, 7},
	//      {2, 1, 2, 0,  3, 5, 3, 4,  5, 1, 1, 9}
	//      });
	//
	//  //Matrix<int> m3(m1.rows(), m2.cols());	
	//  //naiveMult(m1, m2, m3);
	//  //std::cout << m3 << '\n';
	//
	//
	//  BlockedMatrix<int> a(m1.rows()/4, m1.cols()/4, 4);
	//  BlockedMatrix<int> b(m2.rows()/4, m2.cols()/4, 4);
	//  BlockedMatrix<int> c(a.rows(), b.cols(), 4);
	//
	//  toBlocked(m1, a);
	//  toBlocked(m2, b);
	//
	//  simpleBlockedMult(a, b, c);
	//  Matrix<int> cc(c.rows()*c.getBlockSize(), c.cols()*c.getBlockSize());
	//  parallelizm::toSimpleMatrix(c, cc);
	//  std::cout << cc;
	return 0;
}
